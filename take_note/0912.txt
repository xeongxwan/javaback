1.git 이란?
	버전관리
	백업하기
	협업하기

	형상관리 도구
2. 깃 허브(Github)
	깃의 원격 저장소
	또는 온라인 저장소

3.깃 클라이언트 프로그램
	깃허브 데스크톱 : 깃의 기본 기능
	소스트리 : 깃의 기본 + 고급 기능
	커맨드 라인 인터페이스 : 터미널 창에 직접 명령을
		입력해서 깃을 사용하는 방법

4 깃 설치 : https://git-scm.com
	1)윈도우에 깃 설치 : 설치하면 리눅스 명령어를 사용할 수 있도록 깃 배시(git bash)
		프로그램도 함께 설치됨
		
		설치 확인 : $git
	
	2) 깃 환경 설정
		사용자 젖보를 입력 : 깃은 버전을 저장할 떄마다 그 버전을 만든 사용자 정보도
			함께 저장하기 때믄에 사용자 정보 설정이 필요
		
		-- 이컴퓨터에서 작업하는 모든 깃에 적용
		$ git config -- global user,name "Hong GilDong"
		$ git config -- global user.email "hong@hong.com"

		-- 현재 작업하는 파일에만 적용
		$ git config  user,name "이름"
		$ git config  user.email "메일"


	3) 디렉터리(폴더) 살펴 보기 
		pwd : 현재 위치의 경로
		ls : 파일확인
		ls -l : 상세정보
		ls -a : 숨김파일과 디렉터리 표시
		ls -la : 상세정보 및 숨김파일과 디렉터리 표시

5. 깃 저장소 만들기
	1) 깃 초기화(initialize) : git init
		저장소를 만들 디렉터리를 초기화
		Initialized empty Git repository in~ : 성공

	2) ls -la
		.git : 깃을 사용하면서 버전이 저장될 저장소(repository), 로컬 저장소

6. 용어정리
	1) 깃 버전 : 문서를 수정하고 저장할 떄 마다 생기는 것
		원래 파일 이름은 그대로 유지하면서 파일에서 무엇을 변경했는지 를 변걍 시점마다 저장
		각 버전마다 잗업했던 내용을 확인할 수 있고, 그버전으로 되돌아 갈 수도 있음
	2) 버전관리 시스템 : 버전을 만들고 만든 시간과 수정 내용까지 기록할수 있는 것
	
	3) stage와 commit 의 이해
		
		.git 디렉터리 안의(스테이지, 저장소) : 스테이지와 저장소는 숨김 파일 형태로 존재하는 영역
		
		*작업트리(Working tree) : 파일 수정, 저장 등의 작업을 하는 디렉터리
			working directory , 우리 눈에 보이는 directory가 바로 이 작업 directory
		* STAGE : 버전으로 만들 파일이 대기하는 곳,  staging area
			.git/index 파일에 저장
		* repository : 스테이지에서 대기하고 있던 파일들을 버전으로 만들어 저장하는 곳
			.git/head 파일에 저장
	

	4) 버전 만드는 순서
		작업 트리에서 문서 작성 및 수정 -> 버전으로 만들 파일을 스테이징 영역에 저장 ->
		스테이지에 있던 파일을 저장소로 커밋(commiit) -> 스테이지에 대기하고 있던 파일들이
		모두 저장소에 저장


7. 깃 상태 확인 하기
	$ git status
	on branch master : 현재 master 브랜치, 저장소에ㅐ 들어 있는 디렉터리와 비슷
	No commits yet : 아직 커밋 파일이 없음
	Nothing added to commit untrackerd files present : 현재 커밋할 파일이 없으나
							추적되지 않은 파일이 있음

	untracked file : 한번도 버전 관리하지 않은 파일
	trackerd : 깃은 한번이라도 커밋을 한 파일의 수정 여부를 계속 추적해서 추적여부를 알려줌
8. 수정한 파일/새로운 파일을 스테이징하기 
	스테이지 영역에 올리기 : 버전 관리할 대상들
	$git add 파일명.확장자 : 하나씩 처리
	$git add. : 작업트리에서 수정한 파일/ 새파일들을  한꺼번에 스테이지에 올림
	$git add *확장자 : 확장자가 같은 파일을 동시에 스테이지에 올림

9. 스테이지에 있는 파일을 커밋하기 : 버전 만들기 단계
	$ git commit ㅡ '메세지'

10. 버전이 제대로 만들었는지 확인
	$ git log : 커밋한 정보만
	$ git log -- stat : 커밋한 정보와 커미\ㅅ한 파일까지 확인 (Enter -다음화면 Q-로그화면 빠져나오기)

11. 스테이징과 커밋을 한꺼번에 처리
	$git commit - am 



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
	
