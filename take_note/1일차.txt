JAVA
   프로그래밍 언어
1. 기계어(Machine language) : 0, 1로 이루어진 코드를 사용
	사람과 기계어 사이 다리 역할을 하는 프로그래밍 언어 필요

   프로그래밍 언어 : 사람의 언어와 기계어 사이를 연결할 수 있는 매개체
		컴퓨터에게 작업을 시키기 위한 도구
		프로그램을 만들 수 있는 언언  
                            프로그램(일을 처리할 수 있게 하는 것)

  소스(source) 파일  : 프로그래밍 언어로 작성한 파일, 명령어를 작성해 놓은 것

  컴파일(Compile) : 컴퓨터가 이해할 수 있는 언어는 0과 1뿐
		사람의 말을 컴퓨터는 이해할 수 없음(사람이 이해하기 쉬운
 		문장으로 구성되어 있어서)
		이러한 언어들은 기계어로 바꾸어 컴퓨터에 전달이 필요
		사람의 언어를 컴퓨터 언어로 변환하는 과정

  컴파일러(compiler) : 컴파일을 해주는 프로그램 또는 명령어(실행 프로그램)
		번역기

  	=> 소스파일을 기계어 파일로 번역하는 것을 컴파일이라고 하고
		이 역할을 담당하는 소프트웨어를 컴파일러라고 함

2. 자바의 역사
	1996년 자바 1.0을 발표 
	LTS(Long Term Support) 버전 공개  => jdk 8, jdk 11, jdk 17
	오라클 라이선스 : 자바 개발 도구(jdk)의 배포

3. 자바의 특징
	- 모든 운영체제에서 실행 가능(플랫폼 독립적)
	- 객체 지향 프로그래밍(OOP: Object-Oriented Programming)
	- 메모리 자동 정리(자동 메모리 관리, Garbage Collection:GC)
	- 풍부한 무료 라이브러리
	- 이식성이 좋음
	- 멀티 쓰레드를 지원, 동적 로딩을 지원
	- 네트워크와 분산처리를 지원

4. 자바의 활용분야
	- 웹 애플리케이션
	- 빅데이터,
	- 클라우드
	- 모바일
	- .....

5. 자바 개발 도구(JDK : Java Developement Kit)
	자바를 이용해 프로그램을 개발하는데 필요한 도구( 블록으로 채워진 상자
	- 네모, 원형,..... 새로운 블록 추가 되면 다양한 완성품 만들기가 가능 - JDK버전)
   JRE(Java Runtime Environment) : 완성된 프로그램을 실행하는데 필요한 환경
	jdk를 가져와 프로그램을 완성하고 jre 위에서 실행하면 프로그램이 돌아가는 것
   JVM(Java Virtual Mechine) : 자바 프로그램을 실행해 줌
	머신 : 운영체제

	자바소스코드 -----------------------> 바이트 파일     --------------------> 실행파일(기계어)
	(Hello.java)	컴파일	       Hello.class	 jvm을 구동
			javac.exe			java.exe

=======================================
jdk 설치 : jdk-11.0.19

6. jdk 설치 및 환경설정
	1)  환경변수 설정
		내pc -> 마우스 오른쪽: 속성 -> 고급시스템 설정 -> 환경변수 -> (아래쪽)시스템 변수
  		-> 새로 만들기 (변수 이름 :  JAVA_HOME, 변수 값: C:\Java\jdk-11.0.19 , 
                                      만약 새로운 버전을 설치시 변수 값만 수정하면 됨)
	2) PATH 설정
		(아래쪽) 시스템 변수 -> PATH -> 편집 -> 새로만들기 : %JAVA_HOME%\bin,
		맨위로 올리기
	3) 설치 확인
		CMD창 : 	javac.exe -version
			java.exe -version

	4) 통합개발환경(IDE) : 이클립스, 인텔리 j,...
		이클립스 : 버전 - 2022-03
			다운받아 압축을 푼 후 -> eclipse 폴더 -> eclipse.exe 파일 실행 
			                                                  마우스 오른쪽 : 작업표시줄에 고정하면 좀 편해짐

======
이클립스 환경 설정
	window - prefernce


===================================================================
===================================================================
1. 자바의 구조
	프로젝트 
		패키지(소문자)
			클래스(첫글자는 대문자로 시작)
				메소드(첫글자는 소문자, 메소드명( ))
				코드

=====
package exam01;  //패키지명 - 주석을 제외하고 첫줄에 작성, 하나만 작성
// 한줄 주석  , Ctrl + /
/*  여러 줄 주석  */
public class Hello{ //클래스의 시작

	// public : 접근 제한자(제어자), 모든 클래스에서 접근 가능
    // class : class 파일을 작성하고 있음
	// Hello : 클래스명{ }
	
	public static void main(String[] args) { // main 메소드의 시작
		// public : 접근 제어자, 어떤 클래스에서나 접근 가능
		// static : 클래스를 호출(메모리로 로드)할 때 메모리에 함께 읽혀진다.
		// void : 반환값(return 값)이 없음,  여기서 실행하고 끝냄, 자신을 호출한 곳으로
		//         가져갈 값이 없음
		// main( ) :  메소드,  컴파일러가 컴파일시 시작하는 시발점(프로그램 실행 진입점, Entry Point)
		//            jvm이 제일 먼저 읽어서 프로그램을 시작하는 진입점
		
		// 자바에서 실행문은 반드시 세미콜론(;)로 끝낸다.
		System.out.println("안녕!! 자바!!");    // sysout  -> Ctrl + spacebar,   실행문
								// 콘솔 창에 출력
		//System.out : 시스템의 출력 장치(모니터)
		//println() : 괄호안의 내용을 콘솔창에 출력하고 결과 뒤에서 줄바꿈하기
		System.out.println("즐거운 시간...");   // 실행 - Ctrl + F11   

	} // main 메소드의 끝

} // 클래스의 끝



======================================
2. 단축키
	Ctrl + F11  : 실행
	Ctrl + D  : 줄삭제
	Ctrl + Alt + 위/아래 방향키 : 복사
	Alt + 위/아래 방향키 : 줄단위로 위/아래로 이동
	단어입력 + Ctrl + SpaceBar : 자동완성, 관련 메소드 및 클래스 보기
	Ctrl + /  : 한줄 주석
	범위 설정 + Ctrl + Shift + / : 여러줄 주석
	Ctrl + N : 새로운 패키지 및 클래스 작성
	Ctrl + + :  글자 키우기
 	Ctrl + - : 글자 축소
	Ctrl + M : 작업화면만 표시/작업화면, 익스플로러, 콘솔창 표시

   클래스파일 / 패키지 이름 변경 : 변경할 클래스 파일이나 패키지 선택 -> 마우스 오른쪽 : Refactor-Rename
===============

3. 출력 메소드(함수)
	- 시스템 표준 출력 장치 : 모니터
	- 시스템 표준 입력 장치 : 키보드
	- System.out.println(출력할 내용);
 	  시스템이 가지고 있는.출력장치로.괄호안의 출력 내용을 출력하고 행을 바꾸기
	
	<화면에 데이터 출력 >
	1) println( ) : 괄호 안의 내용을 출력하고 줄바꿈
	2) print( ) : 괄호 안의 내용을 출력만 하고 줄바꿈 하지 않음
	3) printf( ) : 출력서식을 지정해서 출력, 줄바꿈 하지 않음

4. 컴파일러의 해석은 위 -> 아래로, 왼쪽 -> 오른쪽으로 해석해 나감
	흐름을 바꿀 수 있는 것 : 제어문(if, for,...)

	
5. 제어문자
	- \n : 줄바꿈, new line
	- \t : tab,  위와 아래의 줄 간격을 맞춰 띄우고 싶을 때
	- \" :  "
	- \\ : \
===
package firstExam; 

//범위 설정 -> Ctrl + Shift + F  : 코드 정리
// Ctrl + Alt + 위/아래 방향키 : 줄 단위 복사
// Ctrl + D  : 줄 제거
public class FirstVariable {  // 클래스 시작
	public static void main(String[] args) {  //main 메소드 시작
		System.out.print("Hello, Java!!\n");  
		System.out.print("즐거운 시간!!");  
		System.out.print("자바는 즐거워!!");  
		
	} //end of main
} //end of class

================================
<식별자 명명>
1. 캐멀케이스 : printTest , variableExam, PrintTest
2. 스네이크 케이스 : print_test, variable_exam, Print_Test
3. 헝가리안 표기법 : iAge : 정수형변수,  자료의 타입을 변수명 앞에 적음
		doubleAge
		fAverage

4. 식별자 명명 규칙
	- 첫 글자는 반드시 문자이거나 $, _(underbar)로 작성
	  (변수명이나 함수, 메소드 등의 첫 글자는 숫자를 사용할 수 없음)
		Test(0),  testName01(0), 1test(x), test-name(x)
	- 영어는 대소문자를 구분
		test ≠ Test
	- 자바 예약어를 사용할 수 없음
	- 단어 길이에 제한이 없음


	
	



