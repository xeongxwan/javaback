1.자바구조
	프로젝트(Alt+ Shift +N)
		패키지(앞글자는 소문자):Crtl + N
			클래스(class) 
				->객체 지향 언어에서 프로그램을 개발하는 단위
				->적어도 하나 이상의 클래스가 있어야함
				->클래스 이름과 소스 파일의 이름은 같아야 함
				->클래스 이름은 대문자로 시작하는 것이 관례
				메소드(method)
					->수행할 작업을 나열한 코드의 모임(기능)
					->자바 애플리케이션은 main()메소드(진입점,시발점)부터 실행을 시작
				실행문(statement) : 작업을 지시하는 변수를 선언, 값 저장,메소드 호출 등의 코드를 작성
					->실행문 끝은 반드시 세미콜론(;)을 붙여서 실행문이 끝낫음을 표시
						System.out.println("안녕!! 자바!!");
						int age;
						string name="홍길동';
2.주석문:프로그램에 덧붙이는 설명문, 컴파일러가 무시하고 지나가는 문장
	행단위 주석://주석글
	범위 주석: /* 주석글 */
	문서 주석 : /**주석글*/, Javadoc.exe 명령어로 API문서를 생성하는데 사용
	주석 주의 사항 : ""안에 있는 주석은 문자열로 인식(주석이 아니라 문자열)
3.문자:'','A','1','가'
  문자열: "", "A","1","가","홍길동",
  정수:1,35...
  실수:1.5.0.7

4.식별자:변수,함수,메소드,클래스명.....
	-문자:_(underbar),$로 시작해야함
		test,test_1,_test ->(0)
		3test,test-3 , +test -> (x)
	-대소문자 구분
		True ≠ true, False ≠ false, Test ≠  test
	- +,-등 연산자를 포함할 수 없음
		test+3 -> (x)
	-글자수에는 제한이 없음 
	-자바의 키워드를 사용할 수 없음
		데이터 타입-byte,short,int,long,float,double,string...
		접근 지정자:publice,private,...
		제어문:if,for.....
	-공백문자를 사용할 수 없음
		test3 -> (x)


5.식별자 관례
	-프로그램의 가동성을 높일 수 있음
	-변수와 메소두눈 모두 소문자로 표기
	 단,복합 단어일 때는 두 번째 단어부터의 단어의 첫 글자만 대문자로 표기
	ex) int  thisYear
		.캐멀케이스 : int studentSum
		.스네이크 케이스 : int student_sum
		.헝가리안 표기번: 데이터 타입을 알 수 있도록 식별자에 데이터 타입을 표기
			int iSum, float fAverage
	-클래스와 인터페이스는 첫 자만 대문자로 표기하고 나머지는 소문자로 표기
	다, 복합 단어일때는 두 번째 단어부터 단어의 첫 자만 대문자로 표기
		public interface MyRunnavle()
	-상수는 전체를 대문자로 표기
	단, 복합 단어일 때는 단어를 언더바(_)로 연결
		final int NUMBER_ONE =1
		final double Pl = 3.141592



5.변수(Variable)
	-하나의 값을 저장할 수 있는 저장 공간(가장 마지막에 들어온 값 하나 저장)
	-값을 저장할 수 있는 메모리의 특정 번지에 붙여진 이름
	-변수를 통해 해당 메모리 번지에 하나의 값을 저장하고 읽을 수 있음
	-변수는 정수,실수 등 다양한 타입(type, 형, 자료형)의 값을 저장할 수 있음
	-변수는 선언시 반드시 초기화를 싴닌다

	1)변수 이름 : 식별자 규칙과 같음
	2)변수 선언
		자료형(TYPE,형) : 변수에 담기는 자료가 어떤 자료인지 알려주는 역할
			(정수,실수,문자열,문자,배열,클래스...)
			
		자료형 변수명 = 대입할 값;
		int	num	=3;	//초기화, 정수
		double	avg	=3.7; 	//실수
		char	ch	='a';	//문자
		String	name	="홍길동";	//문자열

	3)변수의 생존 기간
		-jvm이 데이터를 삭제시키는 시기까지
		-변수는 자신이 선언된 블록{()} 안에서만 사용 가능(지역변수)
		-실제 단순히 중괄호{()} 내에서 변수를 선언하여 사용:제어문,메소드 등의 중괄호 사용
	
	4)자료형(type,형)의 종류
		-java의 모든 변수, 상수는 자료형이 먼저 선언되어야 함
		-한 번에 정의된 자료형에는 다른 자료형을 저장할 수 없음
			int num = 3; //정수
			num = 7; //가능, 정수
			num = "홍길동", //불가능,"홍길동"은 문자열이라...

			double num = 3.14; //에러, 
				//위에서 int 이미 한번 선언된(int) 변수는 같은 이름으로 다시 다른 타입으로 선언 불가
		-타입과 변수를 선언하면 반드시 초기화 시킨다.
			int age=10;

			int su;
			su = 20;
			=====
			int test;
			int hap;
			hap= test+ hap;//에러, test에 값이 담겨 있지 않아서

		-java는 기본자료형과 참조 자료형으로 자료형을 구
		-기본 자료형(타입,형) : 8개
			정수: byte(1byte),short(2byte),int(4byte),long(8byte)
			실수: float(4byte),double(8byte)
			문자: char(2byte, 문자,정수)
			불(boolean): true,false
		-참조 자료형(타입) :  배열,열거,클래스,인터페이스,....
			직접 정의할 수 있어서 무한개가 존재

		-기본 자료형과 잠조 자료형의 차의점
			.기본 자료형 :이름은 소문자로 시작(int,long...)
				값을 stack메모리에 저장
			.참조 자료형 : 이름은 첫글자가 대문자로 시작(String,Scanner,...)
				값을 heap 메모리에 저장
				heap 메모리는 작접 접근 불가,heap 영역을 값을 담고 그 값이
				담긴 주소(위치,번지)를 stack메모리에 저장

7.메모리 구조 (자바에서 메모리 관리는 운용체제가 아닌 jvm이 함)
	레지스터 영역 	| 데이터영역	| stack영역	| heap영역

8.char형 
	-문자(정수)를 저장하는 자료 형
	-문자를 저장하기 위해서는 작은 따옴표(' ')사용 : 'a', '3', '가'
	-유니코드 값을 그대로 입력 가능('\u 16진수코드')
	-정수값(10진수 또는 16진수 등 다양한 진법)의 직접 입력 가능
9.자바에서 다양한 진법 표현
	8진수 : 0 + 정수  -> 0123
	16진수 : 0x + 정수 -> 0x123
	2진수 : 0b + 정수 -> 0b1001
10.기본 자료형 간의 자료형 변환 (타입변환,형변환)
    -자바는 =(등호)를 기준으로 왼쪽과 오른쪽의 타입(자료형)이 동일해야 함.
	1)기본자료형 : 8개
		.정수 : byte(1byte), short(2byte),int(4byte),long(8byte)
			long =>숫자 뒤에 L 또는 l (소문자 엘)
		.실수 : float(4byte), double(8byte)
			float = > 숫자 뒤에 F 또는 f붙임,  
		.문자 : char(2byte)
		.불(boolean) :true,false
	2)자동타입변환(작 -> 큰, 작은 그릇과 큰 그릇이 연산을 하면 큰 그릇에 담김)
		정수형(byte,short,int)은 산술연산을 하면 자동으로 int형으로 변환
			(jvm은 기본적으로  4byre 단위로 연산 처리 하기때문)
			byte + byte => int
			short + int = int
		(byte,short,int,long) 산술연산(+,-,*,/,%) long = > long
		정수형과 실수형의 연산 => 실수
		문자와 정수 연산 => 정수 : 'A' + 2 => 'A'의 코드값이 65
					65 + 2 =>67 => 코드68의 문자 'C'
		프로그램 실행 도중에 자동적으로 형 변환(타입 변환이 일어나는 것)
			작은 크기를 가지는 타입이 큰 크기를 가지는 타입에 저장될때 발생
			큰 크기 타입 = 작은 크기 타입 => 작은 크기 타입이 큰 크기 타입으로 자동 형변환 되어 저장
			byte < short < int <long < float < double

		자동으로 타입변환이 발생되면 변환 이전의 값과 변환이후의 값은 동일
			즉,변환 이전의 값은 변환 이후에도 손실없이 그대로 보존됨

	3) 강제 타입변환(casting) : 타입 변환 연산자를 사용해 데이토 타입을 강제로 변환하는 연산
		(데이터타입)형태의 타입 변환 연산자 붙임
		 (double)sum / 3
		double avg =? (int)avg
		강제적으로 큰 데이터 타입을 작은 데이터 타입으로 쪼개어서 저장하는 것
		작은 크기 타입 = (작은 크기타입) 큰 크기 타입
		-주의사항 : 사용자로부터 입력받은 값을 변환할 때 값의 손실이 발생하면 안된다.
			강제 타입변환을  하기 전에 우선 안전하게 값이 보존될수 있는지 검사할 필요 있음
			정수 타입을 실수 타입으로 변환할 때도 정밀도 손실을 피해야함 => 모든 int값을
			실수 타입으로 안전하게 변환시키기 위해서는 double 타입을 사용합
		-(타입)값 - > 값이 괄호 안의 타입으로 변경

	4)문자열 타입변환 : 문자열은 어떤 자료형과 묶으면 무조건 문자열
		문자열과 다른 자료형을  연결하면 결과는 항상 문자열

		"가나다" + 34 => "가나다34"
		3 + 5 + "가나다" = "8가나다"
		"가나다" = 3 + 5 => "가나다35"
		"가나다" + (3+5) => "가나다8"

	-문자열을 일반 자료형으로 타입 변환
		일반 자료형은 일반 자료형 까지 형변환되고,
		클래스 타입은 클래스를 사용하여 타입변환을 해야 함
		integer.parselent("100") = > 정수값 100
11).변수(variable) : 하나의 값을 저장하기 위한 공간 (맨 마지막에 저장한 값만 저장)
    상수(constant) : 값을 한번만 저장할 수 있는 공간
		자바에서 상수에는 final 붙이고 상수명을 대문자로 표현
		final 상수타입 상수명 = 값;
		final double PI = 3.14;
		final int WIDTH = 15; //여기에서만 값을 지정하고 변경
		
		final int HEIGHT;
		HEIGHT = 20;
    리터럴(literal) : 그 자체로 값을 의미하는 것

12.서식문자 및 printf함수
	-printf() : 지시자를 통해 변수의 값을 여러 가지 형식으로 변환하여 출력하는 기능
		줄바꿈이 안됨
		출력 형식을 지정할 수 있음
		System.out.printf("%d %2f", num,avg);

		int age=25;
		int year=2023;
		System.out.printf("나이 = %d, 연도 = %d \n",age,year);
	-서식 문자
		%d : 10진(deciaml)정수의 형식으로 출력
		%x : 16진(hexa-decimal)정수의 형식으로 출력
		%o: 8진(octal) 정수형식으로 출력
		%f: 부동소수점(floating-point) 형식으로 출력
			%전체자릿수.소수점아래자릿수f
		%c: 문자(character)로 출력
		%s: 문자열(string)로 출력

		%전체자릿수서식
		%3d : 3자리 확보, 오른쪽부터 채워짐
		%3d : 3자리 확보, 왼쪽부터 채워짐

13.연산자
	1)산술 연산자
		+ : 더하기
		- : 뺄셈
		* : 곱셉
		/ : 나눗셈(정수 / 정수 => 정수 / 실수 / 실수 => 실수, 실수/정수 => 실수)
		%나머지(정수%정수만 가능)
	2상황연산자
		형식)조건 ?조건이 참일 때 실행할 값 : 조건이 거짓일 때 실행할 값

		조건 ?조건이 참일 때 실행할 값 : 조건이 거짓일 때 실행할 값
		변수= 조건?조건이 참일 때 실행할 값 ; 조건이 거짓일 때 실행할 값
	3)비교연산자(결과가 ture/false)
		>(크다,초과),
		>=(크거나 같다, 이상)
		<(작다,미만)
		<=(작거나 같다,이하)
		==(같다)
		!=(같지 않다)
	
		==,!== : 기본자료 형에서는 값이 같은지 다른지 비교
			참고 자료형에서는 번지(주소)가 같은지 다른지 비교

27p~108p











		











