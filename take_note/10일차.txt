*java까지의 발전과정 : 반 학생들의(40명)의 성적 처리를 기준으로 설명
변수 -> 배열(c언어) -> 그전[(c++,메소드 포함가능, 상속 불가) -> 클래스(java, 기능추가,상속,메소드..)

*철자 지향형 프로그래밍 : 순서에 맞추어 단계적으로 실행하도록 명령어를 나열
*객체지향형 프로그래밍:객체를 구성하고 객체 단위로 프로그래밍

1.클래스(Class): 객체를 사용할 수 있는 실체, 객체를 만들기 위한 설계도, 붕어빵틀
	객체(Object) = class의 인스턴스(Instance) : 붕어빵,아파트,... 완성되어 사용할 수 있는 것
	클래스의 구성 요소 : 필드(=멤버 변수,속성),메소드(기능, 동작방식),이너클래스

2.객체 지향 프로그래밍(OOP: Object-Oriented Programming)의 특징
	객체 프로그램은 소프트웨어를 개발할 부품에 해당하는 객체들을 먼저 만들고, 이 객체들을 하나씩 조립해서
			완성된 프로그램을 만드느 기법

	-캡슐화(Encapsulation) : 정보온닉(information hiding), 필드와 메소드를 하나의 캡슐처럼 포장해서
				세부 내용을 외부에서 알 수 없도록 감추는 것
				주목적: 내부 데이터를 숨겨서 외부 영향을 받지 않도록 하는 것
				외부로부터 보호하고 싶은 필드나 메소드가 있다면 캡슐화해서 외부에서
				직접 접근할 수 없도록 사용 범위를 제한

	-상속(Inheritance) :	재사용성
			     	상위 객체를 재사용해서 하위 객체를 쉽고 빠르게 설계할 수 있도록 도와줌
				이미 잘 개발된 객체를 재사용해서 새로운 객체를 만들기 때문에 반복된 코드의
				중복을 줄여줌
				자식클래스는 부모 클래스의 메소드와 필드를 사용할 수 있으며, 자신에게 맞게
				수정하거나 새로 추가할 수 있음

	-다형성(Polymorphism) : 같은 타입이지만 실행 결과가 다양한 객체를 이용할수있는 성질
				자바 다형성을 위해 부모 클래스 또는 인터페이스의 타입 변환을 허용
				다향성의 효과는 객체의 부품화가 가능

3.객체:속성과 동작으로 구성